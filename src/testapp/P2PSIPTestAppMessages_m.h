//
// Generated file, do not edit! Created by nedtool 4.6 from testapp/P2PSIPTestAppMessages.msg.
//

#ifndef _P2PSIPTESTAPPMESSAGES_M_H_
#define _P2PSIPTESTAPPMESSAGES_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include <CommonMessages_m.h>
#include <ManetAddress.h>
// }}

/**
 * Class generated from <tt>testapp/P2PSIPTestAppMessages.msg:33</tt> by nedtool.
 * <pre>
 * packet SIPRegisterCall extends BaseCallMessage
 * {
 *     string identifier;
 *     ManetAddress address;
 * }
 * </pre>
 */
class SIPRegisterCall : public ::BaseCallMessage
{
  protected:
    opp_string identifier_var;
    ManetAddress address_var;

  private:
    void copy(const SIPRegisterCall& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SIPRegisterCall&);

  public:
    SIPRegisterCall(const char *name=NULL, int kind=0);
    SIPRegisterCall(const SIPRegisterCall& other);
    virtual ~SIPRegisterCall();
    SIPRegisterCall& operator=(const SIPRegisterCall& other);
    virtual SIPRegisterCall *dup() const {return new SIPRegisterCall(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getIdentifier() const;
    virtual void setIdentifier(const char * identifier);
    virtual ManetAddress& getAddress();
    virtual const ManetAddress& getAddress() const {return const_cast<SIPRegisterCall*>(this)->getAddress();}
    virtual void setAddress(const ManetAddress& address);
};

inline void doPacking(cCommBuffer *b, SIPRegisterCall& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, SIPRegisterCall& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>testapp/P2PSIPTestAppMessages.msg:38</tt> by nedtool.
 * <pre>
 * packet SIPRegisterResponse extends BaseResponseMessage
 * {
 *     string identifier;
 *     ManetAddress address;
 *     bool isSuccess;
 * }
 * </pre>
 */
class SIPRegisterResponse : public ::BaseResponseMessage
{
  protected:
    opp_string identifier_var;
    ManetAddress address_var;
    bool isSuccess_var;

  private:
    void copy(const SIPRegisterResponse& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SIPRegisterResponse&);

  public:
    SIPRegisterResponse(const char *name=NULL, int kind=0);
    SIPRegisterResponse(const SIPRegisterResponse& other);
    virtual ~SIPRegisterResponse();
    SIPRegisterResponse& operator=(const SIPRegisterResponse& other);
    virtual SIPRegisterResponse *dup() const {return new SIPRegisterResponse(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getIdentifier() const;
    virtual void setIdentifier(const char * identifier);
    virtual ManetAddress& getAddress();
    virtual const ManetAddress& getAddress() const {return const_cast<SIPRegisterResponse*>(this)->getAddress();}
    virtual void setAddress(const ManetAddress& address);
    virtual bool getIsSuccess() const;
    virtual void setIsSuccess(bool isSuccess);
};

inline void doPacking(cCommBuffer *b, SIPRegisterResponse& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, SIPRegisterResponse& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>testapp/P2PSIPTestAppMessages.msg:44</tt> by nedtool.
 * <pre>
 * packet SIPResolveCall extends BaseCallMessage
 * {
 *     string identifier;
 * }
 * </pre>
 */
class SIPResolveCall : public ::BaseCallMessage
{
  protected:
    opp_string identifier_var;

  private:
    void copy(const SIPResolveCall& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SIPResolveCall&);

  public:
    SIPResolveCall(const char *name=NULL, int kind=0);
    SIPResolveCall(const SIPResolveCall& other);
    virtual ~SIPResolveCall();
    SIPResolveCall& operator=(const SIPResolveCall& other);
    virtual SIPResolveCall *dup() const {return new SIPResolveCall(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getIdentifier() const;
    virtual void setIdentifier(const char * identifier);
};

inline void doPacking(cCommBuffer *b, SIPResolveCall& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, SIPResolveCall& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>testapp/P2PSIPTestAppMessages.msg:48</tt> by nedtool.
 * <pre>
 * packet SIPResolveResponse extends BaseResponseMessage
 * {
 *     string identifier;
 *     ManetAddress address;
 *     bool isSuccess;
 * }
 * </pre>
 */
class SIPResolveResponse : public ::BaseResponseMessage
{
  protected:
    opp_string identifier_var;
    ManetAddress address_var;
    bool isSuccess_var;

  private:
    void copy(const SIPResolveResponse& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SIPResolveResponse&);

  public:
    SIPResolveResponse(const char *name=NULL, int kind=0);
    SIPResolveResponse(const SIPResolveResponse& other);
    virtual ~SIPResolveResponse();
    SIPResolveResponse& operator=(const SIPResolveResponse& other);
    virtual SIPResolveResponse *dup() const {return new SIPResolveResponse(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getIdentifier() const;
    virtual void setIdentifier(const char * identifier);
    virtual ManetAddress& getAddress();
    virtual const ManetAddress& getAddress() const {return const_cast<SIPResolveResponse*>(this)->getAddress();}
    virtual void setAddress(const ManetAddress& address);
    virtual bool getIsSuccess() const;
    virtual void setIsSuccess(bool isSuccess);
};

inline void doPacking(cCommBuffer *b, SIPResolveResponse& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, SIPResolveResponse& obj) {obj.parsimUnpack(b);}


#endif // ifndef _P2PSIPTESTAPPMESSAGES_M_H_

