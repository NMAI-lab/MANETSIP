//
// Generated file, do not edit! Created by nedtool 4.6 from testapp/P2PSIPTestAppMessages.msg.
//

#ifndef _P2PSIPTESTAPPMESSAGES_M_H_
#define _P2PSIPTESTAPPMESSAGES_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include <CommonMessages_m.h>
// }}

/**
 * Class generated from <tt>testapp/P2PSIPTestAppMessages.msg:12</tt> by nedtool.
 * <pre>
 * packet SIPChallengeCall extends BaseCallMessage
 * {
 * }
 * </pre>
 */
class SIPChallengeCall : public ::BaseCallMessage
{
  protected:

  private:
    void copy(const SIPChallengeCall& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SIPChallengeCall&);

  public:
    SIPChallengeCall(const char *name=NULL, int kind=0);
    SIPChallengeCall(const SIPChallengeCall& other);
    virtual ~SIPChallengeCall();
    SIPChallengeCall& operator=(const SIPChallengeCall& other);
    virtual SIPChallengeCall *dup() const {return new SIPChallengeCall(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, SIPChallengeCall& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, SIPChallengeCall& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>testapp/P2PSIPTestAppMessages.msg:15</tt> by nedtool.
 * <pre>
 * packet SIPChallengeResponse extends BaseResponseMessage
 * {
 *     string identifier;
 * }
 * </pre>
 */
class SIPChallengeResponse : public ::BaseResponseMessage
{
  protected:
    opp_string identifier_var;

  private:
    void copy(const SIPChallengeResponse& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SIPChallengeResponse&);

  public:
    SIPChallengeResponse(const char *name=NULL, int kind=0);
    SIPChallengeResponse(const SIPChallengeResponse& other);
    virtual ~SIPChallengeResponse();
    SIPChallengeResponse& operator=(const SIPChallengeResponse& other);
    virtual SIPChallengeResponse *dup() const {return new SIPChallengeResponse(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getIdentifier() const;
    virtual void setIdentifier(const char * identifier);
};

inline void doPacking(cCommBuffer *b, SIPChallengeResponse& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, SIPChallengeResponse& obj) {obj.parsimUnpack(b);}


#endif // ifndef _P2PSIPTESTAPPMESSAGES_M_H_

